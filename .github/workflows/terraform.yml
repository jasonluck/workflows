name: Terraform

on:
  workflow_call:
    inputs:
      path:
        required: false
        type: string
        default: '.'
      terraform_version:
        description: The version of terraform to use. Defaults to the latest
        required: false
        type: string
        default: 'latest'
      tfsec_version:
        description: The version of tfsec to use. Defaults to the latest
        required: false
        type: string
        default: 'latest'
      terrform_workspace:
        description: Name of the terraform workspace.
        required: false
        type: string
        default: 'default'
      variables:
        description: Variables to pass to terraform
        required: false
        type: string
        default: ''
      apply:
        description: Flag to apply changes. Defaults to true
        required: false
        type: boolean
        default: true
    secrets:
      token:
        required: true


jobs:
  linting:
    uses: ./.github/workflows/tf-lint.yml
    permissions:
      contents: write
      pull-requests: write
    with:
      path: ${{ inputs.path }}
      terraform_version: ${{ inputs.terraform_version }}
      terraform_workspace: ${{ inputs.terraform_workspace }}
      variables: ${{ inputs.variables }}
    secrets:
      token: ${{ secrets.token }}

  security:
    uses: ./.github/workflows/tf-security.yml
    permissions:
      contents: read
      pull-requests: write
    with:
      path: ${{ inputs.path }}
      tfsec_version: ${{ inputs.tfsec_version }}

  plan:
    name: Plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ inputs.path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  apply:
    name: Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && inputs.apply
    needs: [plan]
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ inputs.path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -auto-approve
